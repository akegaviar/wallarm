.. _check-operation-ru:

=============================================
Проверьте работоспособность фильтрующего узла
=============================================

Если все настроено правильно, приложение будет пропускать запросы
и проксировать их в соответствии с настройками файла конфигурации.

Проверить работоспособность можно двумя способами:

* При помощи команды ``wallarm-status``
* Тестовой атакой

Команда ``wallarm-status``
~~~~~~~~~~~~~~~~~~~~~~~~

Вы можете получить статистику работы фильтрующего узла, обратившись к нему
командой :command:`localhost/wallarm-status``.

Включение/выключение команды осуществляется в файле конфигурации
``nginx.conf``.

Выполните в терминале команду:

.. code-block:: command

   curl http://127.0.0.8/wallarm-status

Будет получен ответ в виде:

.. code-block:: console

	{"requests":0,"attacks":0,"blocked":0,"abnormal":0,"tnt_errors":0,"time_detect":0,
	"time_tnt":0,"db_id":0,"lom_id":0,"proton_instances": { "total":1,"success":1,"fallback":0,
	"failed":0 } }

Где:

* ``requests``: количество запросов, которые были обработаны фильтрующим
  узлом.
* ``attacks``: количество зафиксированных атак.
* ``blocked``: количество заблокированных запросов.
* ``abnormal``: количество запросов, которые расценены как нетипичные для
  приложения.
* ``tnt_errors``: количество запросов, которые не были проанализированы в
  постаналитике. Для этих запросов учитываются параметры блокировок, но они
  не видны в интерфейсе и не учитываются в статистических и поведенческих
  проверках.
* ``time_detect``: суммарное время, потраченное на анализ запросов.
* ``time_tnt``: суммарное время, потраченное на запись запросов в локальное
  хранилище.
* ``db_id``: версия используемой ``proton.db``.
* ``lom_id``: версия используемого ЛОМ.
* ``total``: количество пар ``proton.db`` + ЛОМ.
* ``success``: количество успешно загруженных пар ``proton.db`` + ЛОМ.
* ``fallback``: количество пар ``proton.db`` + ЛОМ, загруженных из последних
  сохраненных файлов.
* ``failed``: количество пар ``proton.db + ЛОМ``, которые не были
  инициализированы и работают в режиме «не анализировать».

Данные всех счетчиков накапливаются с момента запуска NGINX. В случае если
Wallarm был установлен в готовую инфраструктуру с NGINX, сервер NGINX должен
быть перезапущен для запуска Wallarm.

.. note:: Команда :command:`wallarm-status` по умолчанию доступна только на
          том сервере, где установлен фильтрующий узел Wallarm. Чтобы узнать,
          как разрешить выполнение этой команды с других серверов, обратитесь
          к описанию директивы `wallarm_status` в разделе
          :ref:`configure-parameters-ru`. 

Тестовая атака
~~~~~~~~~~~~~~

Проверить обнаружение атак можно, отправив к защищаемому ресурсу запрос,
который Wallarm заведомо воспринимает как нелегитимный. Примером такого
запроса может служить:

.. code-block:: command

   http://<resource_URL>/?id='or+1=1--a-<script>prompt(1)</script>

Wallarm должен выдать на этот запрос два срабатывания:

* Попытка выполнить SQLI
* Попытка выполнить XSS

Теперь при повторном выполнении :command:`wallarm-status` счетчик количества
атак увеличится.

Если обе проверки прошли правильно, то первичная установка и настройка
фильтрующего узла завершена. Можно перейти к: :ref:`user-ru`
