.. _installation-docker-ru:

==================================
Установите с использованием Docker
==================================

Фильтрующий узел может быть установлен в виде Docker-контейнера. Контейнер
является «толстым» и содержит все подсистемы фильтрующего узла.

Функциональность фильтрующего узла, установленного в виде Docker-контейнера,
полностью идентична функциональности других вариантов установки.

Для установки фильтрующего узла в виде Docker-контейнера вам потребуется
выполнить следующие действия:

#. Развернуть фильтрующий узел.
#. Подключить фильтрующий узел к облаку Wallarm.
#. Настроить модуль NGINX-Wallarm.
#. Настроить ротацию логов.
#. Настроить мониторинг.

Разверните фильтрующий узел
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Выполните команду:

.. code-block:: command

   docker run -d -v /path/to/license.key:{/etc/wallarm/license.key} -e DEPLOY_USER="deploy@example.com" -e DEPLOY_ PASSWORD="very_secret" -e NGINX_BACKEND=example.com -p 80:80 wallarm/node

где:

* ``/path/to/license.key`` -- путь к лицензионному ключу на хосте.
* ``example.com`` -- защищаемый ресурс.
* ``deploy@example.com`` -- логин для доступа к `https://my.wallarm.com <https://my.wallarm.com>`__.
* ``very_secret`` -- пароль для доступа к `https://my.wallarm.com <https://my.wallarm.com>`__.

В результате выполнения команды:

* на порте 80 будет доступен защищаемый ресурс.
* в облаке `https://my.wallarm.com <https://my.wallarm.com>`__ будет
  зарегистрирован новый фильтрующий узел; он будет отображаться в
  соответствующем разделе настроек веб-интерфейса.

Для тонкой настройки вы можете разместить дополнительные конфигурационные
файлы внутри контейнера.

Подключите фильтрующий узел к облаку Wallarm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Фильтрующий узел взаимодействует с облаком, находящемся на удаленном сервере.

Варианты подключения фильтрующего узла к облаку:

* Автоматическая регистрация
* Использование заранее известных реквизитов
* Использование готового конфигурационного файла

Автоматическая регистрация
--------------------------

Передайте переменные окружения :command:`DEPLOY_USER`,
:command:`DEPLOY_PASSWORD` c реквизитами доступа к `https://my.wallarm.com <https://my.wallarm.com>`__.

В результате при первом запуске контейнер автоматически зарегистрируется в облаке.

Если контейнер с таким именем уже существует, команда завершится с ошибкой.

Чтобы избежать этого, используйте переменную окружения :command:`DEPLOY_FORCE=true`.

.. code-block:: command

   docker run -d -v /etc/wallarm/license.key -e DEPLOY_USER="deploy@example.com" -e DEPLOY_PASSWORD="very_secret" -e NGINX_BACKEND=[ IP address ] wallarm/node

Использование заранее известных реквизитов
------------------------------------------

Для доступа к облаку фильтрующий узел использует ``uuid`` и ``secret``,
которые можно передать в переменных окружения :command:`NODE_UUID`
и :command:`NODE_SECRET`.

.. code-block:: command

	docker run -d -v /etc/wallarm/license.key -e "NODE_UUID=00000000-0000-0000-0000-000000000000" -e NODE_SECRET="0000000000000000000000000000000000000000000000000000000000000000" -e NGINX_BACKEND=93.184.216.34 wallarm/node

Использование готового конфигурационного файла
----------------------------------------------

Если у вас уже есть готовый конфигурационный файл ``node.yaml``, передайте
его внутрь контейнера при помощи «внешнего тома»:

.. code-block:: command

   docker run -d -v /etc/wallarm/license.key -v /etc/wallarm/node.yaml -e NGINX_BACKEND=93.184.216.34 wallarm/node

Настройте модуль NGINX-Wallarm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Настройка фильтрующего узла осуществляется через конфигурационный файл NGINX.

Контейнер позволяет использовать упрощенный режим настройки через переменные
окружения, который включается при передаче переменой окружения
``NGINX_BACKEND``.

Упрощенный режим
----------------

* ``NGINX_BACKEND`` -- адрес бэкенда, на который необходимо передавать все
  входящие запросы. Если адрес не содержит префикса ``http://`` или ``https://``,
  то по умолчанию будет использован ``http://``. Подробнее в документации на
  `proxy_pass <http://nginx.org/ru/docs/http/ngx_http_proxy_module.html#proxy_pass>`__.
* ``WALLARM_MODE``: режим работы модуля NGINX-Wallarm. Подробнее в описании параметра
   ``wallarm_mode`` в :ref:`configure-parameters-ru`.

Конфигурационные файлы
----------------------

Директории, используемые NGINX:

* ``/etc/nginx-wallarm/conf.d`` -- общие настройки.
* ``/etc/nginx-wallarm/sites-enabled`` -- настройки виртуальных хостов.
* ``/var/www/html`` -- статические файлы.

Настройте модуль постаналитики
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /ru/include-ru/configure-postanalytics-ru.rst

Настройте ротацию логов
~~~~~~~~~~~~~~~~~~~~~~~

Логирование по умолчанию включено.

Логи пишутся в следующие директории:

* ``/var/log/nginx-wallarm/`` -- логи NGINX.
* ``/var/log/wallarm/`` -- логи подсистем Wallarm.

По умолчанию логи ротируются раз в сутки. Изменение параметров ротации через
переменные окружения не предусмотрено. Настройка ротации происходит через
конфигурационные файлы в `/etc/logrotate.d/`.

Настройте мониторинг
~~~~~~~~~~~~~~~~~~~~

Внутри контейнера установлены Nagios-совместимые скрипты для мониторинга
фильтрующего узла. Подробнее в разделе :ref:`configure-monitor-ru`.

Пример вызова скриптов:

.. code-block:: command

	docker exec -it wallarm-node /usr/lib/nagios-plugins/check_wallarm_tarantool_timeframe -w 1800 -c 900
	docker exec -it wallarm-node /usr/lib/nagios-plugins/check_wallarm_export_delay -w 120 -c 300

На этом установка завершена.

.. include:: /ru/include-ru/check-setup-installation-ru.rst

