.. _concept-ru:

====================
Как работает Wallarm
====================

Введение
~~~~~~~~

Для защиты веб-сайта или веб-приложения Wallarm анализирует все входящие
HTTP-запросы. Чтобы отделить легитимный трафик от опасных для ресурса атак
и заблокировать их, анализируются как GET- и POST-запросы к приложению,
так и его ответы. Для анализа весь сетевой трафик проксируется через один
или несколько фильтрующих узлов Wallarm, которые мгновенно блокируют любой
вредоносный запрос (1). Фильтрующий узел непрерывно направляет метрики
приложения/трафика в облако Wallarm (2). Облако Wallarm, применяя машинное
обучение, формирует профиль приложения, а также правила безопасности,
специфичные для данного приложения. 

Облачный сканер уязвимостей проверяет особенности каждой атаки
(например, нацелена она на существующие уязвимости или нет), а также запускает
дополнительные проверки, специфичные для конкретного приложения (3). 

.. image:: /_images/wallarm-concept.png

Фильтрующие узлы устанавливаются в сетевую инфраструктуру компании
и пропускают через себя трафик веб-приложения, работая как обратный
прокси-сервер (reverse-proxy) glossaryTTK. В основу фильтрующего узла заложен веб-сервер
NGINX.

Возможны разные конфигурации и способы установки Wallarm.

Фильтрующий узел может быть установлен на отдельный сервер перед сервером,
где находится защищаемое веб-приложение. Если у вас есть работающий сервер
NGINX или NGINX Plus, фильтрующий узел можно установить на один сервер
с NGINX и интегрировать с ним. Возможность установки на отдельный сервер
также остается.

Подробнее о вариантах установки рассказано в разделе:
:ref:`installation-intro-ru`.

Структура фильтрующего узла
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Фильтрующий узел включает следующие компоненты:

* модуль NGINX-Wallarm
* находящееся в оперативной памяти локальное хранилище Tarantool
* служебные и аналитические скрипты
* систему мониторинга

Каждый фильтрующий узел выполняет следующие действия: 

* Принимает входящий HTTP-трафик, проверяет его соответствие определенным
  правилам, отправляет его на сервер веб-приложения и возвращает ответ
  клиенту. Этим занимается модуль NGINX-Wallarm. Запросы и результаты их
  анализа пишутся в хранилище Tarantool. Хранилище Tarantool организовано
  по принципу кольцевого буфера TTKglossary. Это означает, что когда достигнут
  конец выделенной под хранилище памяти, производится перезапись с начала
  хранилища.  
* Анализирует данные запросов перед отправкой информации в облако Wallarm.
  Этим занимаются скрипты. Все аналитические действия производятся уже над
  сериализованными представлениями запросов. Скрипты работают асинхронно
  с Tarantool.
* Отправляет в облако Wallarm следующие данные:

    * зафиксированные атаки
    * различные счетчики
    * агрегированную статистику по запросам
    * данные мониторинга

* Принимает из облака следующие данные:

    * правила фильтрации запросов (proton.db и локальное обучающее множество
      LOM)
    * правила обнаружения атак перебора TTKglossary(brute-force атак)
    * обновления програмнного обеспечения из репозиториев

Взаимодействие фильтрующего узла Wallarm с облаком Wallarm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Фильтрующий узел взаимодействует с находящимся на удаленном сервере облаком
Wallarm:

* фильтрующий узел отправляет в облако статистические данные о трафике
* фильтрующий узел получает из облака обновленные правила безопасности

Для защиты передаваемых данных взаимодействие фильтрующего узла с облаком
всегда осуществляется по протоколу HTTPS.

Для защиты от атаки типа MITM (Man in The Middle) glossaryTTK используется
несколько средств защиты: 

* сильное шифрование -- на стороне фильтрующего узла хранится
  Certificate Authority glossaryTTK, позволяющий однозначно идентифицировать
  облако.
* взаимодействие с API, посредством которого происходит общение с облаком,
  осуществляется по порту 444, в отличие от стандартного порта 443.
  Фильтрующие узлы должны иметь доступ к порту 444, чтобы взаимодействовать
  с облаком.  

Правила безопасности приложения
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Правила безопасности приложения, формируемые в облаке Wallarm, состоят из двух
компонент:

* proton.db -- база данных, содержащая глобальные правила, применяемые для
  всех приложений.
* LOM -- Local Object Module glossaryTTK. Правила безопасности для конкретного
  приложения, сгенерированные на основе запросов пользователей и ответов
  приложения на них. 

Правила безопасности обновляются каждые 15 минут и передаются фильтрующему
узлу.

Расшифровка SSL
~~~~~~~~~~~~~~~

Трафик веб-приложения должен проходить через фильтрующие узлы
в незашифрованном виде. То есть, если к приложению поступает трафик по
протоколу HTTPS, он должен быть расшифрован до попадания на фильтрующий узел.

Расшифровку можно осуществить двумя способами:

* Установить раскодировщик SSL перед фильтрующим узлом.
* Раскодировать SSL средствами самого Wallarm. 
  Для этого необходимо настроить сервер NGINX-Wallarm. Как это сделать, рассказано в руководстве по TTK[настройке серверов HTTPS](http://nginx.org/ru/docs/http/configuring_https_servers.html).


