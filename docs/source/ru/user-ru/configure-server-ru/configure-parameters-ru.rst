.. _configure-parameters-ru:

=====================================
Тонкая настройка конфигурации Wallarm
=====================================

Настройка модуля NGINX-Wallarm не значительно отличается от настройки самого
NGINX. При работе с Wallarm доступны все возможности настройки оригинального
веб-сервера NGINX.

`Документация NGINX <https://www.nginx.com/resources/admin-guide/>`__.

Переменные NGINX-Wallarm
~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :widths: 10 30 25
   :header-rows: 1

   * - Переменная
     - Тип
     - Значение
   * - .. code-block:: conf

           wallarm_request_time

     - Число с плавающей точкой
     - |  Время выполнения запроса
       |  в секундах

   * - .. code-block:: conf

           wallarm_is_input_valid

     - Целое число
     - |  Валидность запроса

       ``0``: запрос валиден.

            |  Запрос проверен
            |  фильтрующим узлом
            |  и соответствует
            |  правилам ЛОМ.

       ``1``: запрос невалиден.

            |  Запрос проверен
            |  фильтрующим узлом
            |  и не соответствует
            |  правилам ЛОМ.

   * - .. code-block:: conf

          wallarm_attack_type

     - Целое число
     - |  Типы атак, представленные
       |  в запросе в виде битовой строки

       ``0x00000000``: отсутствие атаки

       ``0x00000001``: xss

       ``0x00000002``: sqli

       ``0x00000004``: rce

       ``0x00000008``: xxe

       ``0x00000010``: ptrav

       ``0x00000020``: crlf

       ``0x00000040``: redir

       ``0x00000080``: nosqli

       ``0x00000200``: brute

       ``0x00000400``: dirburst

       ``0x00000800``: marker

       ``0x20000000``: overlimit_res

       ``0x40000000``: zip_bomb

       ``0x80000000:`` vpatch


Директивы NGINX-Wallarm
~~~~~~~~~~~~~~~~~~~~~~~

:command:`wallarm_block_page`
-----------------------------

Позволяет задать страницу, которая будет возвращена клиенту при блокировке
нелегитимного запроса. Может принимать любое значение, допустимое для
внутреннего перенаправления, в том числе именованный :command:`location`.
Является аналогом `директивы NGINX error_page <http://nginx.org/en/docs/http/ngx_http_core_module.html#error_page>`__.

.. note:: Параметр может настраиваться на уровнях server и location.

.. seealso::

     - `База знаний: Как определить, что пользовательские запросы блокирует именно Wallarm <https://wallarm.atlassian.net/wiki/pages/viewpage.action?pageId=65221296>`_

:command:`wallarm_cache_path`
-----------------------------

Директория, в которой при запуске сервера NGINX будет создан каталог ``backup``
для хранения копии ``proton.db`` и ``lom``. У пользователя, от которого
работает NGINX, должны быть права записи в эту директорию.

.. note:: Параметр может настраиваться только на уровне HTTP.

:command:`wallarm_fallback`
----------------------------

При значении ``on`` NGINX получает возможность войти в аварийный режим:
при невозможности загрузить ``proton.db/lom`` данная настройка отключает
модуль Wallarm для блоков ``http``, ``server``, ``location``, для которых
данные не загрузились. Сам NGINX продолжит работать.

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

:command:`wallarm_global_trainingset_path`
------------------------------------------

Путь к файлу ``proton.db``, содержащему глобальные настройки фильтрации
запросов, не зависящие от структуры web-приложения.

Значение по умолчанию: :file:`/etc/wallarm/proton.db`

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

:command:`wallarm_instance`
---------------------------

Идентификатор приложения. Используется для визуального отделения данных
разных приложений на панели в интерфейсе Wallarm. Допустимы только числовые
значения.

Идентификаторы приложения используются исключительно для удобства просмотра.
Для корректной сепарации данных по приложениям необходимо установить те же
значения идентификаторов в визуальном интерфейсе. Схема настройки описана в
разделе :ref:`configure-app-ru`.

Любой фильтрующий узел будет фильтровать трафик для любого количества
приложений без дополнительной настройки.

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

:command:`wallarm_key_path`
---------------------------

Путь к лицензионному ключу Wallarm.

Значение по умолчанию: :file:`/etc/wallarm/license.key`

:command:`wallarm_local_trainingset_path`
-----------------------------------------

Путь к ``lom``, содержащему информацию о защищаемом веб-приложении
и настройках ноды.

Значение по умолчанию: :file:`/etc/wallarm/lom`

:command:`wallarm_mode`
-----------------------

Режимы фильтрации трафика:

* ``off``: фильтрация запросов не производится.
* ``monitoring``: все запросы обрабатываются, но никакие не блокируются
  даже при обнаружении атак.
* ``block``: блокируются все запросы, в которых была распознана типизированная
  атака.
* ``aggressive``: блокируются все нестандартные запросы. Например, передача
  строки в поле, в которое обычно передается число. Рекомендуется использовать
  крайне осторожно.

В качестве значения директивы можно использовать переменные, доступные после
получения строки запроса и заголовков. Это можно использовать для применения
разных политик для разных клиентов.

.. code-block:: conf

    map $remote_addr $wmode {
    1.2.3.4 off;
    10.41.29.0/24 monitoring;
    default block;
    }
    ...

    wallarm_mode $wmode;

Значение по умолчанию: ``off``

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

На возможности работы :command:`wallarm_mode` влияет значение директивы
:command:`wallarm_mode_allow_override`.

:command:`wallarm_mode_allow_override`
--------------------------------------

Управляет возможностью переопределять значение директивы :command:`wallarm_mode`
через правила, выгружаемые из облака:

* ``off``: правила, заданные в ``lom``, игнорируются.
* ``strict``: посредством ``lom`` можно только усилить режим работы.
* ``on``: можно как усилить, так и смягчить режим работы.

Например, если заданы :command:`wallarm_mode monitoring` и
:command:`wallarm_mode_allow_override strict`, то через облако можно включить
блокировку каких-то запросов, но нельзя полностью отключить анализ атак.

Значение по умолчанию: ``off``

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

:command:`wallarm_parse_response`
---------------------------------

Режим обработки ответов веб-сервера.

По умолчанию обрабатываются только запросы от клиента к веб-серверу.

Возможные значения:

* ``on``: анализ ответов веб-сервера пассивным сканером уязвимостей, без
          отправки запросов из облака Wallarm.
* ``off``: анализ ответов не производится.

Значение по умолчанию: ``off``

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

.. warning:: Отключите обработку статических файлов через ``location``
             для увеличения производительности.

             Не работает при включенном сжатии на стороне бэкенда. При
             необходимости запретите передачу на бэкенд заголовка
             ``Accept-Encoding``.

:command:`wallarm_parse_websocket`
----------------------------------

По умолчанию сообщения WebSockets не анализируются на предмет атак. 
Анализ WebSockets необходимо принудительно включить с помощью директивы
:command:`wallarm_parse_websocket`.

Возможные значения:

* ``on``: анализ сообщений включен.
* ``off``: анализ сообщений не производится.

Значение по умолчанию: ``off``

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

:command:`wallarm_parser_disable`
---------------------------------

Позволяет отключать парсеры.

Поддерживаются следующие парсеры:

* ``action``
* ``cookie``
* ``gzip``
* ``json``
* ``multipart``
* ``base64``
* ``path``
* ``percent``
* ``urlenc``
* ``xml``

**Пример**

.. code-block:: conf

    wallarm_parser_disable base64;
    wallarm_parser_disable xml;
    location /ab
    { wallarm_parser_disable json; wallarm_parser_disable base64; proxy_pass http://example.com; }
    location /zy
    { wallarm_parser_disable json; proxy_pass http://example.com; }

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.


:command:`wallarm_process_time_limit`
-------------------------------------

Ограничение времени обработки одного запроса, значение задается
в миллисекундах.

Если запрос обрабатывается дольше, чем время, указанное в параметре
:command:`wallarm_process_time_limit`, то в лог пишется ошибка, а запрос
помечается как атака ``overlimit_res``. В режиме блокировки
:command:`wallarm_mode block` запросы блокируются, в режиме мониторинга
:command:`wallarm_mode monitoring` -- пропускаются.

Значение по умолчанию: 1000 мс (одна секунда).

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

:command:`wallarm_process_time_limit_block`
-------------------------------------------

Возможность управлять блокировкой запросов, превысивших лимит времени,
заданный в параметре :command:`wallarm_process_time_limit`.

* ``off``: запросы всегда пропускаются.
* ``on``: запросы всегда блокируются.
* ``attack``: зависит от режима блокировки атаки, заданного в параметре
  :command:`wallarm-mode`. ``monitoring`` -- запросы пропускаются, ``block``
  и ``aggressive`` -- запросы блокируются.

Значение по умолчанию: ``wallarm_process_time_limit_block attack``

.. note:: Параметр может настраиваться на уровнях ``http``, ``server``,
          ``location``.

:command:`wallarm_status`
-------------------------

Настройка конфигурации :command:`wallarm_status` позволяет указать адреса
серверов, с которых можно выполнить одноименную команду. По умолчанию доступ
запрещен отовсюду, за исключением системных адресов ``127.0.0.1`` и ``::1``,
позволяющих выполнять команду только на сервере, где установлен Wallarm. 

.. code-block:: conf

    location = /wallarm-status {
        allow 127.0.0.1;
        allow ::1;
        allow 10.41.29.0;
        deny all;
        wallarm_status on;
            }

Чтобы разрешить выполнение команды с другого сервера, добавьте в конфигурации
инструкцию ``allow`` с IP-адресом нужного сервера, например: 

.. code-block:: conf

   allow 10.41.29.0;

.. seealso::

   - :ref:`user-check-operation-ru`

:command:`wallarm_tarantool_connect_attempts`
---------------------------------------------

Количество неудачных попыток переподключения к Tarantool. По достижению предела
попытки будут прекращены на время
:command:`wallarm_tarantool_connect_interval`.

.. note:: Параметр может настраиваться только на уровне ``http``.

:command:`wallarm_tarantool_connect_interval`
---------------------------------------------

Задержка переподключения к Tarantool после того, как количество неудачных
попыток превысило порог :command:`wallarm_tarantool_connect_attempts`.

.. note:: Параметр может настраиваться только на уровне ``http``.

:command:`wallarm_tarantool_host`, :command:`wallarm_tarantool_port`
--------------------------------------------------------------------

Параметры соединения с TarantoolBox. В этой базе хранится информация
о последних обработанных запросах.

Для корректной работы необходимо указывать лог для записи сериализованных запросов.

.. note:: Параметр может настраиваться только на уровне ``http``.

:command:`wallarm_worker_rlimit_vmem`

Mаксимальный объем виртуальной памяти, который может потреблять воркер
NGINX-Wallarm. При превышении установленного значения воркер будет
терминирован. Если единица измерения не указана, то по умолчанию ею будет байт.

Значение по умолчанию: 1 ГБ

.. note:: Параметр может настраиваться только на уровне ``http``.